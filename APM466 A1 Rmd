```{r}
library("readxl")
library("jrvFinance")
bond <- read_excel("Bond_Data.xlsx", sheet = 1)
```

### Question 4(a): Yield Curve
```{r}
coupon_payment <- as.numeric(bond$Coupon)
maturity_date <- gsub(x = bond$'Maturity Date', pattern = "UTC", replacement="", 
                     fixed = T)
close_price_date <- c("2023-01-16", "2023-01-17", "2023-01-18", "2023-01-19", 
                      "2023-01-20", "2023-01-23", "2023-01-24", "2023-01-25",
                      "2023-01-26", "2023-01-27")
close_price_matrix = matrix(c(bond$'2023-01-16', bond$'2023-01-17', 
                              bond$'2023-01-18', bond$'2023-01-19',
                              bond$'2023-01-20', bond$'2023-01-23', 
                              bond$'2023-01-24', bond$'2023-01-25',
                              bond$'2023-01-26', bond$'2023-01-27'), nrow = 10, 
                            ncol = 10, byrow = TRUE)


ytm_matrix = matrix('numeric', nrow = 10, ncol = 10)
for (j in c(1:10)) {
  close_price = close_price_matrix[,j]
  for (i in c(1:10)) {
    ytm_matrix[i,j] <- bond.yield(settle = close_price_date[i],
                                 mature = maturity_date[j], 
                                 coupon = coupon_payment[j], 
                                 freq = 2, close_price[i], 
                                 convention = c("30/360", "ACT/ACT", "ACT/360", 
                                                "30/360E"), comp.freq = 2, 
                                 redemption_value = 100)
  }
}
# calculate time to maturity in year-fraction

year_frac = matrix('numeric', nrow = 10, ncol = 10)
for (i in c(1:10)) {
  for (j in c(1:10)) {
    year_frac[i,j] = yearFraction(close_price_date[i], maturity_date[j], freq = 2, convention = c("30/360", "ACT/ACT", "ACT/360", "30/360E"))
  }
}


year <- c(0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5)
plot(year, ytm_matrix[1, ], type = "o", main = "YTM Curve", col = "black", xlab = "Years", ylab = "YTM",lwd = 1.0)
colour = c("yellowgreen", "darkorange", "skyblue", "lightyellow", "sienna", "lightpink",  "darkblue", "powderblue", "blueviolet", "red")
for (i in c(2:10)) {
  lines(year, ytm_matrix[i,], type = "o", col = colour[i-1], lwd = 1.0)
}

# Add a legend to the plot

legend("topright",pch=c(15,15),legend=c("2023-01-16", "2023-01-17", "2023-01-18",
                                       "2023-01-19", "2023-01-20", "2023-01-23",
                                       "2023-01-24", "2023-01-25", "2023-01-26", 
                                       "2023-01-27"), 
       col=c(1,2,3,4,5,6,7,8,9,10), lty=1.3, cex=0.6)


# linear interpolation on ytm for "2022-09-01"and "2023-09-01"

est_maturity <- c("2022-03-01", "2022-09-01", "2023-03-01", "2023-09-01","2024-03-01")
Jan = matrix('numeric', nrow=10, ncol=5, byrow = TRUE)
for (j in c(1:10)){
  for(i in c(1:5)){
    Jan[j,i] <- yearFraction(close_price_date[j],est_maturity[i])
  }
}
est_ytm_b4 <- c()
est_ytm_b6 <- c()

for (j in c(1:10)) { 
  dy_ratio_b4 <- (as.numeric(Jan[j,2])-as.numeric(Jan[j,1]))/(as.numeric(Jan[j,3])-as.numeric(Jan[j,1]))
  est_ytm_b4[j] = (as.numeric(ytm_matrix[,5][j])-as.numeric(ytm_matrix[,3][j]))*dy_ratio_b4 + as.numeric(ytm_matrix[,3][j])

  dy_ratio_b6 <- (as.numeric(Jan[j,4])-as.numeric(Jan[j,3]))/(as.numeric(Jan[j,5])-as.numeric(Jan[j,3]))
  est_ytm_b6[j] = (as.numeric(ytm_matrix[,7][j])-as.numeric(ytm_matrix[,5][j]))*dy_ratio_b6 + as.numeric(ytm_matrix[,5][j])
}

ytm_matrix_md = ytm_matrix
ytm_matrix_md[,4] <- est_ytm_b4
ytm_matrix_md[,6] <- est_ytm_b6

maturity_date_md <- c("2023-06-01","2024-06-01","2025-06-01","2023-03-01",
                      "2024-09-01","2026-06-01","2026-03-01","2026-09-01",
                      "2027-03-01","2027-09-01")

year_frac_md = year_frac
for(i in c(1:10)){
  for (j in c(4,6)){
    year_frac_md[i,j] = yearFraction(close_price_date[i], maturity_date_md[j], freq = 2, convention = c("30/360", "ACT/ACT", "ACT/360", "30/360E"))
  }
}

# plot ytm curve (with linear interpolation)
year<-c(0.5,1,1.5,2,2.5,3,3.5,4,4.5,5)
plot(year,ytm_matrix_md[1, ], type = "o", main = 'YTM Curve with interpolation',
     col = "black", xlab = "Year", ylab = "YTM", lwd = 0.8)
colour = c("yellowgreen", "darkorange", "skyblue", "lightyellow", "sienna", 
                        "lightpink", "darkblue", "powderblue", "blueviolet", 
                        "red")
for (i in c(2:10)){ 
  lines(year, ytm_matrix_md[i,], type = "o", col=colour[i-1], lwd = 0.8)
}

# Add a legend to the plot

legend("topright",pch=c(15,15),legend=c("2023-01-16", "2023-01-17", "2023-01-18",
                                       "2023-01-19", "2023-01-20", "2023-01-23", 
                                       "2023-01-24", "2023-01-25", "2023-01-26", 
                                       "2023-01-27"),
       col=c(1,2,3,4,5,6,7,8,9,10),lty=1.3,cex=0.6)
```


### Question 4(b): Calculate spot rate

```{r}
dp <- matrix('numeric', nrow = 10, ncol = 10)

for (j in 1:10){
  for (i in 1:10){
    dp[j,i] = bond.TCF(close_price_date[j],maturity_date[i],coupon_payment[i],
                       freq=2)$accrued + close_price_matrix[j,i]
  }
  }



# calculate cash flow

cf <- list()
for (i in 1:10){
  cf= bond.TCF(close_price_date[i],maturity_date[i],coupon_payment[i],freq=2,redemption_value = 100)$cf
  print(cf)
}


# calculate spot curve

raw_spot_matrix <- matrix(nrow = 10, ncol = 10)

for (i in 1:10) {
  
  t_1 = as.numeric(year_frac[i,1])
  sf_1 = function(x) as.numeric(dp[i,1]) - cf_1[1]*(1+x/2)^(-2*t_1)
  s_1 = uniroot(sf_1,c(0,1))$root
  
  t_2 = as.numeric(year_frac[i,2])
  sf_2 = function(x) as.numeric(dp[i,2]) - cf_2[1]*(1+s_1/2)^(-2*(t_2-0.5*1)) - 
    cf_2[2]*(1+x/2)^(-2*t_2)
  s_2 = uniroot(sf_2,c(0,1))$root
  
  t_3 = as.numeric(year_frac[i,3])
  sf_3 = function(x) as.numeric(dp[i,3]) - cf_3[1]*(1+s_1/2)^(-2*(t_3-0.5*2)) -
    cf_3[2]*(1+s_2/2)^(-2*(t_3-0.5*1)) - cf_3[3]*(1+x/2)^(-2*t_3)
  s_3 = uniroot(sf_3,c(0,1))$root
  
  t_4 = as.numeric(year_frac[i,4])
  sf_4 = function(x) as.numeric(dp[i,4]) - cf_4[1]*(1+s_1/2)^(-2*(t_4-0.5*3)) - cf_4[2]*(1+s_2/2)^(-2*(t_4-0.5*2)) - cf_4[3]*(1+s_3/2)^(-2*(t_4-0.5*1)) - 
    cf_4[4]*(1+x/2)^(-2*t_4)
  s_4 = uniroot(sf_4,c(0,1))$root
  
  t_5 = as.numeric(year_frac[i,5])
  sf_5 = function(x) as.numeric(dp[i,5]) - cf_5[1]*(1+s_1/2)^(-2*(t_5-0.5*4)) -
    cf_5[2]*(1+s_2/2)^(-2*(t_5-0.5*3)) - cf_5[3]*(1+s_3/2)^(-2*(t_5-0.5*2)) -
    cf_5[4]*(1+s_4/2)^(-2*(t_5-0.5*1)) - cf_5[5]*(1+x/2)^(-2*t_5)
  s_5 = uniroot(sf_5,c(0,1))$root
  
  t_6 = as.numeric(year_frac[i,6])
  sf_6 = function(x) as.numeric(dp[i,6]) - cf_6[1]*(1+s_1/2)^(-2*(t_6-0.5*4)) -
    cf_6[2]*(1+s_2/2)^(-2*(t_6-0.5*3)) - cf_6[3]*(1+s_3/2)^(-2*(t_6-0.5*2)) -
    cf_6[4]*(1+s_4/2)^(-2*(t_6-0.5*1)) - cf_6[5]*(1+x/2)^(-2*t_6)
  s_6 = uniroot(sf_6,c(0,1))$root
  
  t_7 = as.numeric(year_frac[i,7])
  sf_7 = function(x) as.numeric(dp[i,7]) - cf_7[1]*(1+s_1/2)^(-2*(t_7-0.5*6)) -
    cf_7[2]*(1+s_2/2)^(-2*(t_7-0.5*5)) - cf_7[3]*(1+s_3/2)^(-2*(t_7-0.5*4)) -
    cf_7[4]*(1+s_4/2)^(-2*(t_7-0.5*3)) - cf_7[5]*(1+s_5/2)^(-2*(t_7-0.5*2)) -
    cf_7[6]*(1+s_6/2)^(-2*(t_7-0.5*1)) - cf_7[7]*(1+x/2)^(-2*t_7)
  s_7 = uniroot(sf_7,c(0,1))$root
  
  t_8 = as.numeric(year_frac[i,8])
  sf_8 = function(x) as.numeric(dp[i,8]) - cf_8[1]*(1+s_1/2)^(-2*(t_8-0.5*7)) -
    cf_8[2]*(1+s_2/2)^(-2*(t_8-0.5*6)) - cf_8[3]* (1+s_3/2)^(-2*(t_8-0.5*5)) -
    cf_8[4]*(1+s_4/2)^(-2*(t_8-0.5*4)) - cf_8[5]*(1+s_5/2)^(-2*(t_8-0.5*3)) -
    cf_8[6]*(1+s_6/2)^(-2*(t_8-0.5*2)) - cf_8[7]*(1+s_7/2)^(-2*(t_8-0.5*1)) - 
    cf_8[8]*(1+x/2)^(-2*t_8)
  s_8 = uniroot(sf_8,c(0,1))$root
  
  t_9 = as.numeric(year_frac[i,9])
  sf_9 = function(x) as.numeric(dp[i,9]) - cf_9[1]*(1+s_1/2)^(-2*(t_9-0.5*8)) -
    cf_9[2]*(1+s_2/2)^(-2*(t_9-0.5*7)) - cf_9[3]*(1+s_3/2)^(-2*(t_9-0.5*6)) -
    cf_9[4]*(1+s_4/2)^(-2*(t_9-0.5*5)) - cf_9[5]*(1+s_5/2)^(-2*(t_9-0.5*4)) -
    cf_9[6]*(1+s_6/2)^(-2*(t_9-0.5*3)) - cf_9[7]*(1+s_7/2)^(-2*(t_9-0.5*2)) -
    cf_9[8]*(1+s_8/2)^(-2*(t_9-0.5*1)) - cf_9[9]*(1+x/2)^(-2*t_9)
  s_9 = uniroot(sf_9,c(0,1))$root
  
  t_10 = as.numeric(year_frac[i,10])
  sf_10 = function(x) as.numeric(dp[i,10]) - cf_10[1]*(1+s_1/2)^(-2*(t_10-0.5*9)) -
    cf_10[2]*(1+s_2/2)^(-2*(t_10-0.5*8)) - cf_10[3]*(1+s_3/2)^(-2*(t_10-0.5*7)) -
    cf_10[4]*(1+s_4/2)^(-2*(t_10-0.5*6)) - cf_10[5]*(1+s_5/2)^(-2*(t_10-0.5*5)) - 
    cf_10[6]*(1+s_6/2)^(-2*(t_10-0.5*4)) - cf_10[7]*(1+s_7/2)^(-2*(t_10-0.5*3)) -
    cf_10[8]*(1+s_8/2)^(-2*(t_10-0.5*2)) - cf_10[9]*(1+s_9/2)^(-2*(t_10-0.5*1)) - cf_10[10]*(1+x/2)^(-2*t_10)
  s_10 = uniroot(sf_10,c(0,1))$root
  
  
  s = rbind(s_1, s_2, s_3, s_4, s_5, s_6, s_7, s_8, s_9, s_10)
  raw_spot_matrix[i,] <- s 
}


# plot spot curve

year<-c(0.5,1,1.5,2,2.5,3,3.5,4,4.5,5)
plot(year,spot_matrix_md[1, ], type = "o", main = 'Spot Curve', col = "black", 
     xlab = "Year", ylab = "Spot Rate", lwd=0.8)
colour = c("red","orange","yellow","sienna","darkblue","purple","powderblue",
                "blueviolet", "yellowgreen")
for (i in c(2:10)){ 
  lines(year, spot_matrix_md[i,], type = "o", col=colour[i-1],lwd=0.8)
}

# Add a legend to the plot

legend("topleft",pch=c(15,15),legend=c("2023-01-16", "2023-01-17", "2023-01-18",
                                       "2023-01-19", "2023-01-20", "2023-01-23", 
                                       "2023-01-24", "2023-01-25", "2023-01-26", 
                                       "2023-01-27"),
       col=c(1,2,3,4,5,6,7,8,9,10),lty=1.3,cex=0.65)


```


## Question 4(C) :forward curve

```{r}
#estimate 5 years spot rate on 2023-01-16, 2024-01-16, 2025-01-16, 2026-01-16, 2027-01-16. 

a=10
spot_md_sep_d1 <- c(spot_matrix_md[a,][2], spot_matrix_md[a,][4], spot_matrix_md[a,][6], spot_matrix_md[a,][8],spot_matrix_md[a,][10])
spot_md_mar_d1 <- c(spot_matrix_md[a,][3], spot_matrix_md[a,][5], spot_matrix_md[a,][7], spot_matrix_md[a,][9])


for(i in c(1:5)){
  est_spot_d1[i] = spot_md_sep_d1[i]+ (spot_md_mar_d1[i] - spot_md_sep_d1[i]) * (short_t[i]/long_t[i])
}
            
# calculate 4 years forward rate 1y1y, 1y2y, 1y3y, 1y4y 
fwd_matrix = matrix(nrow = 10, ncol = 4)

for(j in c(1:10)){
  for(i in c(1:4)){
    ff = function(x) ((1+est_spot_5years[j,1]/2)^2)*((1+x/2)^(2*i)) - (1+est_spot_5years[j,i+1]/2)^(2*(i+1))
    fwd_matrix[j,i] <- uniroot(ff,c(0,1))$root
  }
}
# plot forward curve
year <- c(2,3,4,5)
plot(year,fwd_matrix[1, ], type = "o", main = 'Forward Curve', col = "black", xlab = "Year", ylab = "Forward Rate", lwd=0.8)
colour = c("red","orange","yellow","sienna","skyblue","purple","powderblue","blueviolet", "yellowgreen")
for (i in c(2:10)){ 
  lines(year, fwd_matrix[i,], type = "o", col=colour[i-1],lwd=0.8)
}

# Add a legend to the plot
legend("topleft",pch=c(15,15),legend=c("2023-01-16", "2023-01-17", "2023-01-18",
                                       "2023-01-19", "2023-01-20", "2023-01-23", 
                                       "2023-01-24", "2023-01-25", "2023-01-26", 
                                       "2023-01-27"),
       col=c(1,2,3,4,5,6,7,8,9,10),lty=1.3,cex=0.6)
```



## Question 5 : cov matrix for ytm and forward rate

```{r}
# cov matrix for ytm

# calculate YTM for 5 years by the liner interpolation

exact_ytm_matrix = matrix(nrow = 10, ncol = 5)


for (v in c(1:10)){
  exact_ytm_matrix[v,1] = est_spot_5years[v,1]

  for (i in c(2,3,4)) {
    exact_ytm_matrix[v,i] <- as.numeric(ytm_matrix_md[v,i*2]) + (as.numeric(ytm_matrix_md[v,(i*2)+1]) - as.numeric(ytm_matrix_md[v,i*2])) * short_t[i] / long_t[i]
  }
}


# log return of ytm
log_ytm_matrix <- matrix(nrow = 9, ncol = 4)

for (i in c(1:4)) {
  for(j in c(1:9)){
    
  log_ytm_matrix[j,i] <- log(exact_ytm_matrix[(j+1),i]/exact_ytm_matrix[j,i])
  }
}


# covariance matrix for ytm
ytm_cov <- cov(log_ytm_matrix,log_ytm_matrix)


# eigenvalues and eigenvectors for ytm cov matrix
print(eigen(ytm_cov)$values)
print(eigen(ytm_cov)$vectors)
```



## Question 6 cov matrix for forward rate

```{r}
# log return of forward 

log_fwd_matrix <- matrix(nrow = 9, ncol = 4)

for (i in c(1:4)) {
  for(j in c(1:9)){
    log_fwd_matrix[j, i] <- log(fwd_matrix[(j+1),i]/fwd_matrix[j,i])
  }
}

# covariance matrix for forward rate
fwd_cov <- cov(log_fwd_matrix,log_fwd_matrix)


# eigenvalues and eigenvectors for fwd cov matrix
print(eigen(fwd_cov)$values)
print(eigen(fwd_cov)$vectors)
```
